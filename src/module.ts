import { defineNuxtModule } from '@nuxt/kit'
import type { NuxtPlugin } from '@nuxt/schema'

type NuxtPluginOrderItemPathMatch = { pathMatch: string }

// Currently only pathMatch is supported.
type NuxtPluginOrderItem = NuxtPluginOrderItemPathMatch

export type ModuleOptions = {
  /**
   * The desired order of plugins.
   *
   * The order defined here is used to determine the final weight.
   * Plugins provided by Nuxt itself may be omitted. All other plugins (local
   * or from node_modules) must be defined here.
   *
   * Any given plugin may only match with exactly one entry here.
   */
  order: NuxtPluginOrderItem[]

  /**
   * If set, the sorted plugins are logged to the console.
   */
  logSortedPlugins?: boolean
}

export type ModuleHooks = {}

type PluginWithWeight = {
  weight: number
  plugin: NuxtPlugin
  originalWeight: number
}

/**
 * Determine if the plugin is provided by a Nuxt package or one that is generated by Nuxt by default.
 */
const isNuxtPackagePlugin = (src: string) =>
  src.includes('node_modules/nuxt') ||
  src.includes('node_modules/@nuxt') ||
  src.includes('components.plugin.mjs')

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: 'nuxt-plugin-order',
    configKey: 'pluginOrder',
    version: '1.0.0',
    compatibility: {
      nuxt: '^3.9.0',
    },
  },
  defaults: {
    order: [],
    logSortedPlugins: true,
  },
  setup(options, nuxt) {
    const pluginOrderWithWeight = options.order.map((order, weight) => {
      // Makes sure the user defined weights are always at the end.
      return { ...order, weight: weight + 1000 }
    })

    const getWeight = (
      originalWeight: number,
      plugin: NuxtPlugin,
    ): PluginWithWeight | { error: string } => {
      // Build matches.
      const matches = pluginOrderWithWeight.filter((order) => {
        return plugin.src.includes(order.pathMatch)
      })

      if (matches.length === 0) {
        // If the plugin is one provided by Nuxt itself, it's okay if its not defined explicitly.
        if (isNuxtPackagePlugin(plugin.src)) {
          return { plugin, weight: originalWeight, originalWeight }
        }
        // No match found.
        return {
          error: `[nuxt-plugin-order]: Failed to determine order for plugin "${plugin.src}".`,
        }
      } else if (matches.length > 1) {
        // More than one match found.
        return {
          error: `[nuxt-plugin-order]: Plugin "${plugin.src}" matched multiple defined orders: ${JSON.stringify(matches)}`,
        }
      }

      // Success: A weight was found.
      return { plugin, weight: matches[0].weight, originalWeight }
    }
    // Sort the plugins based on our desired weight.
    nuxt.hook('app:resolve', (app) => {
      const result = app.plugins.map((plugin, originalWeight) => {
        return getWeight(originalWeight, plugin)
      })

      const errors = result
        .map((v) => ('error' in v ? v.error : undefined))
        .filter((x): x is NonNullable<typeof x> => Boolean(x))

      // Errors happened, abort build.
      if (errors.length) {
        errors.forEach((v) => console.error(v))
        throw new Error('Failed to determine plugin order.')
      }

      const withWeights = result
        .map((v) => ('weight' in v ? v : undefined))
        .filter((x): x is NonNullable<typeof x> => Boolean(x))

      const sorted = withWeights.sort((a, b) => a.weight - b.weight)

      // Sort plugins.
      app.plugins = app.plugins.sort((a, b) => {
        const indexA = sorted.findIndex((v) => v.plugin.src === a.src)
        const indexB = sorted.findIndex((v) => v.plugin.src === b.src)
        return indexA - indexB
      })

      if (options.logSortedPlugins) {
        const tableObjects = sorted.map((v) => {
          return {
            originalWeight: v.originalWeight,
            src: v.plugin.src,
          }
        })

        console.info('Sorted plugins')
        console.table(tableObjects)
      }
    })
  },
})
